#include "user_app_menu_display.h"
#include "user_app_lcd.h"
#include "user_app_ctrl_oxy.h"
#include "user_internal_mem.h"
/*=============== Function static ================*/
static uint8_t fevent_menu_entry(uint8_t event);
static uint8_t fevent_menu_display_alter(uint8_t event);
static uint8_t fevent_menu_display_calib_oxy(uint8_t event);
static uint8_t fevent_menu_display_back_main_1(uint8_t event);
/*================== Struct ===================*/
sEvent_struct       sEventAppMenu[]=
{
  {_EVENT_MENU_ENTRY,               1, 5, 5,                fevent_menu_entry},
  {_EVENT_MENU_DISPLAY_ALTER,       1, 5, 20,               fevent_menu_display_alter},
  
  {_EVENT_MENU_DISPLAY_CALIB_OXY,   0, 5, 20,               fevent_menu_display_calib_oxy},
  {_EVENT_MENU_DISPLAY_BACK_MAIN_1, 0, 5, TIME_BACK_MAIN_1, fevent_menu_display_back_main_1},
};

Struct_Menu_State               sMenuState={0};
Struct_Menu_Stamp               sMenuStamp={0};
/*================== Function Handle ===================*/
static uint8_t fevent_menu_entry(uint8_t event)
{
    DLCD_Main_1_Entry();
    return 1;
}

static uint8_t fevent_menu_display_alter(uint8_t event)
{
    switch(sMenuState.Screen)
    {
        case _MENU_MAIN_1:
          DLCD_Main_1_Alter();
          break;
          
        case _MENU_MAIN_2:
          DLCD_Main_2_Alter();
          break;
          
        case _MENU_LOGIN:
          DLCD_Login_Alter();
          break;     
          
        case _MENU_SETTING_CYCLE:
          DLCD_Setting_Cycle_Alter();
          break;     
          
        case _MENU_SETTING_SATILITY:
          DLCD_Setting_Satility_Alter();
          break;   
          
        case _MENU_SETTING_PASSWORD:
          DLCD_Setting_Password_Alter();
          break;  

        default:
          break;
    }
    fevent_enable(sEventAppMenu, event);
    return 1;
}

static uint8_t fevent_menu_display_calib_oxy(uint8_t event)
{
    if(sMenuState.CalibOxy == _CALIB_COMPLETE)
    {
        oLCD_C_Calib_Oxy[_LCD_C_CALIB_OXY_PLEASE_CLICK].Status = 1;
        oLCD_C_Calib_Oxy[_LCD_C_CALIB_OXY_STATE_DONE].Status = 1;
        DLCD_Calib_Oxy();
        return 1; 
    }
    else if(sMenuState.CalibOxy == _CALIB_ERROR)
    {
        oLCD_C_Calib_Oxy[_LCD_C_CALIB_OXY_PLEASE_CLICK].Status = 1;
        oLCD_C_Calib_Oxy[_LCD_C_CALIB_OXY_STATE_ERROR].Status = 1;
        DLCD_Calib_Oxy();
        return 1; 
    }
    fevent_enable(sEventAppMenu, event);
    return 1;
}

static uint8_t fevent_menu_display_back_main_1(uint8_t event)
{
    if(sMenuState.Screen != _MENU_MAIN_1)
    {
          sMenuState.Screen = _MENU_MAIN_1;
          Clear_Rol_LCD(2, 7);
          DLCD_Main_1_Entry();
          Stamp_Menu_Exit();
          Menu_ResetState();
          Check_Password();
    }
    return 1;
}
/*====================== Function Use Button Click =======================*/
void User_Button_Enter_Click(void)
{
    Handle_Menu_Button(_BT_ENTER_CLICK);
}

void User_Button_Exit_Click(void)
{
    Handle_Menu_Button(_BT_EXIT_CLICK);
}

void User_Button_Up_Click(void)
{
    Handle_Menu_Button(_BT_UP_CLICK);
}

void User_Button_Down_Click(void)
{
    Handle_Menu_Button(_BT_DOWN_CLICK);
}
/*====================== Function Use Button Hold Cycle =======================*/
void User_Button_Enter_Hold_Cycle(void)
{
    Handle_Menu_Button(_BT_ENTER_HOLD_CYCLE);
}

void User_Button_Exit_Hold_Cycle(void)
{
    Handle_Menu_Button(_BT_EXIT_HOLD_CYCLE);
}

void User_Button_Up_Hold_Cycle(void)
{
    Handle_Menu_Button(_BT_UP_HOLD_CYCLE);
}

void User_Button_Down_Hold_Cycle(void)
{
    Handle_Menu_Button(_BT_DOWN_HOLD_CYCLE);
}
/*====================== Function Use Button Hold Once =======================*/
void User_Button_Enter_Hold_Once(void)
{
    Handle_Menu_Button(_BT_ENTER_HOLD_ONCE);
}

void User_Button_Exit_Hold_Once(void)
{
    Handle_Menu_Button(_BT_EXIT_HOLD_ONCE);
    switch(sMenuState.Screen)
    {
        //Exit Hold Once Back Main 1
        case _MENU_MAIN_2:
        case _MENU_LOGIN:
        case _MENU_SETTING_MAIN:
        case _MENU_SETTING_CYCLE:
        case _MENU_SETTING_CALIB:
        case _MENU_SETTING_SATILITY:
        case _MENU_SETTING_PASSWORD:
          Stamp_Menu_Exit();
          sMenuState.Screen = _MENU_MAIN_1;
          Menu_ResetState();
          Clear_Rol_LCD(2, 7);
          DLCD_Main_1_Entry();
          break;
          
        default:
          break;
    }
}

void User_Button_Up_Hold_Once(void)
{
    Handle_Menu_Button(_BT_UP_HOLD_ONCE);
}

void User_Button_Down_Hold_Once(void)
{
    Handle_Menu_Button(_BT_DOWN_HOLD_ONCE);
}
/*========================= Function Handle Menu =======================*/
void    BT_Menu_Main_1(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          sMenuState.Screen = _MENU_MAIN_2;
          Clear_Rol_LCD(3, 5);
          DLCD_Main_2_Entry();
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
        case _BT_EXIT_HOLD_CYCLE:
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          break;
    
        case _BT_ENTER_HOLD_ONCE:
          sMenuState.Screen = _MENU_LOGIN;
          Menu_ResetState();
          Clear_Rol_LCD(3, 7);
          DLCD_Login_Entry();
          break;
          
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Main_2(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          sMenuState.Screen = _MENU_MAIN_1;
          Clear_Rol_LCD(3, 5);
          DLCD_Main_1_Entry();
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          sMenuState.Screen = _MENU_MAIN_1;
          Clear_Rol_LCD(3, 5);
          DLCD_Main_1_Entry();
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          break;
    
        case _BT_ENTER_HOLD_ONCE:
          sMenuState.Screen = _MENU_LOGIN;
          Menu_ResetState();
          Clear_Rol_LCD(3, 7);
          DLCD_Login_Entry();
          break;
          
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Login(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          switch(sMenuState.Login)
          {
            case _LOGIN_PASS_1:
                sMenuState.Login = _LOGIN_PASS_2;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_2].Status = 1;
                break;
                
            case _LOGIN_PASS_2:
                sMenuState.Login = _LOGIN_PASS_3;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_3].Status = 1;
                break;
                
            case _LOGIN_PASS_3:
                sMenuState.Login = _LOGIN_PASS_4;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_4].Status = 1;
                break;
                
            case _LOGIN_PASS_4:
                sMenuState.Login = _LOGIN_PASS_5;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_5].Status = 1;
                break;
                
            case _LOGIN_PASS_5:
                sMenuState.Login = _LOGIN_PASS_6;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_6].Status = 1;
                break;
                
            case _LOGIN_PASS_6:
                Menu_ResetState();
                if(Check_Password() == 1)   
                {
                  sMenuState.Screen = _MENU_SETTING_MAIN;
                  Clear_Rol_LCD(2, 7);
                  DLCD_Setting_Main_Entry();
                }
                else
                {
                  DLCD_Login_Entry();
                  oLCD_C_Login[_LCD_C_LOGIN_WRONG].Status = 1;
                }
                break;
                
              default: 
                break;
          }
          DLCD_Login();
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          switch(sMenuState.Login)
          {
              case _LOGIN_PASS_1:
                sMenuState.Screen = _MENU_MAIN_1;
                Menu_ResetState();
                Clear_Rol_LCD(3, 7);
                DLCD_Main_1_Entry();
                break;
                
              case _LOGIN_PASS_2:
                sMenuState.Login = _LOGIN_PASS_1;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_1].Status = 1;
                DLCD_Login();
                break;
                
              case _LOGIN_PASS_3:
                sMenuState.Login = _LOGIN_PASS_2;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_2].Status = 1;
                DLCD_Login();
                break;
                
              case _LOGIN_PASS_4:
                sMenuState.Login = _LOGIN_PASS_3;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_3].Status = 1;
                DLCD_Login();
                break;
                
              case _LOGIN_PASS_5:
                sMenuState.Login = _LOGIN_PASS_4;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_4].Status = 1;
                DLCD_Login();
                break;
                
              case _LOGIN_PASS_6:
                sMenuState.Login = _LOGIN_PASS_5;
                oLCD_C_Login[_LCD_C_LOGIN_PASS_5].Status = 1;
                DLCD_Login();
                break;
          }
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
          switch(sMenuState.Login)
          {
            case _LOGIN_PASS_1:
              if(sPassword.Obj1 <9)  sPassword.Obj1++;
              break;
            
            case _LOGIN_PASS_2:
              if(sPassword.Obj2 <9)  sPassword.Obj2++;
              break;
              
            case _LOGIN_PASS_3:
              if(sPassword.Obj3 <9)  sPassword.Obj3++;
              break;
              
            case _LOGIN_PASS_4:
              if(sPassword.Obj4 <9)  sPassword.Obj4++;
              break;
              
            case _LOGIN_PASS_5:
              if(sPassword.Obj5 <9)  sPassword.Obj5++;
              break;
              
            case _LOGIN_PASS_6:
              if(sPassword.Obj6 <9)  sPassword.Obj6++;
              break;
              
              default:
                break;
          }
          break;
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          switch(sMenuState.Login)
          {
            case _LOGIN_PASS_1:
              if(sPassword.Obj1 > 0)    sPassword.Obj1--;
              break;
            
            case _LOGIN_PASS_2:
              if(sPassword.Obj2 > 0)    sPassword.Obj2--;
              break;
              
            case _LOGIN_PASS_3:
              if(sPassword.Obj3 > 0)    sPassword.Obj3--;
              break;
              
            case _LOGIN_PASS_4:
              if(sPassword.Obj4 > 0)    sPassword.Obj4--;
              break;
              
            case _LOGIN_PASS_5:
              if(sPassword.Obj5 > 0)    sPassword.Obj5--;
              break;
              
            case _LOGIN_PASS_6:
              if(sPassword.Obj6 > 0)    sPassword.Obj6--;
              break;
              
              default:
                break;
          }
          break;
    
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Setting_Main(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          switch(sMenuState.SettingMain)
          {
            case _SETTING_MAIN_CYCLE:
                sMenuState.Screen = _MENU_SETTING_CYCLE;
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Cycle_Entry();
                break;
                
            case _SETTING_MAIN_CALIB:
                sMenuState.Screen = _MENU_SETTING_CALIB;
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Calib_Entry();
                break;
                
            case _SETTING_MAIN_SATILITY:
                sMenuState.Screen = _MENU_SETTING_SATILITY;
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Satility_Entry();
                break;
                
            case _SETTING_MAIN_PASSWORD:
                sMenuState.Screen = _MENU_SETTING_PASSWORD;
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Password_Entry();
                break;
                
              default: 
                break;
          }
          Menu_ResetState();
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          sMenuState.Screen = _MENU_MAIN_1;
          Menu_ResetState();
          Clear_Rol_LCD(2, 7);
          DLCD_Main_1_Entry();
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
          switch(sMenuState.SettingMain)
          {
              case _SETTING_MAIN_CYCLE:
                sMenuState.SettingMain = _SETTING_MAIN_PASSWORD;
                Display_Control_Setting(6);
                break;
                
              case _SETTING_MAIN_CALIB:
                sMenuState.SettingMain = _SETTING_MAIN_CYCLE;
                Display_Control_Setting(3);
                break;
                
              case _SETTING_MAIN_SATILITY:
                sMenuState.SettingMain = _SETTING_MAIN_CALIB;
                Display_Control_Setting(4);
                break;
                
              case _SETTING_MAIN_PASSWORD:
                sMenuState.SettingMain = _SETTING_MAIN_SATILITY;
                Display_Control_Setting(5);
                break;
                
              default:
                break;
          }
          break;
          
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          switch(sMenuState.SettingMain)
          {
              case _SETTING_MAIN_CYCLE:
                sMenuState.SettingMain = _SETTING_MAIN_CALIB;
                Display_Control_Setting(4);
                break;
                
              case _SETTING_MAIN_CALIB:
                sMenuState.SettingMain = _SETTING_MAIN_SATILITY;
                Display_Control_Setting(5);
                break;
                
              case _SETTING_MAIN_SATILITY:
                sMenuState.SettingMain = _SETTING_MAIN_PASSWORD;
                Display_Control_Setting(6);
                break;
                
              case _SETTING_MAIN_PASSWORD:
                sMenuState.SettingMain = _SETTING_MAIN_CYCLE;
                Display_Control_Setting(3);
                break;
                
              default:
                break;
          }
          break;
          
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Setting_Cycle(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          switch(sMenuState.SettingCycle)
          {
            case _SETTING_CYCLE_RUN_CHOOSE:
                sMenuState.SettingCycle = _SETTING_CYCLE_RUN_CHANGE;
                oLCD_C_Setting_Cycle[_LCD_C_SETTING_CYCLE_CLICK].Status = 1;
                break;
                
            case _SETTING_CYCLE_FREE_CHOOSE:
                sMenuState.SettingCycle = _SETTING_CYCLE_FREE_CHANGE;
                oLCD_C_Setting_Cycle[_LCD_C_SETTING_CYCLE_CLICK].Status = 1;
                break;
                
            case _SETTING_CYCLE_RUN_CHANGE:
                sMenuState.SettingCycle = _SETTING_CYCLE_RUN_CHOOSE;
                oLCD_C_Setting_Cycle[_LCD_C_SETTING_CALIB_PLEASE].Status = 1;
                Save_Time_Ctrl_Flash(sMenuStamp.TimeRunCtrlOxy, sMenuStamp.TimeFreeCtrlOxy);
                break;
                
            case _SETTING_CYCLE_FREE_CHANGE:
                sMenuState.SettingCycle = _SETTING_CYCLE_FREE_CHOOSE;
                oLCD_C_Setting_Cycle[_LCD_C_SETTING_CALIB_PLEASE].Status = 1;
                Save_Time_Ctrl_Flash(sMenuStamp.TimeRunCtrlOxy, sMenuStamp.TimeFreeCtrlOxy);
                break;
                
              default: 
                break;
          }
          DLCD_Setting_Cycle();
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          switch(sMenuState.SettingCycle)
          {
            case _SETTING_CYCLE_RUN_CHOOSE:
            case _SETTING_CYCLE_FREE_CHOOSE:
              sMenuState.Screen = _MENU_SETTING_MAIN;
              Menu_ResetState();
              Clear_Rol_LCD(2, 3);
              DLCD_Setting_Main_Entry();
              break;
              
            case _SETTING_CYCLE_RUN_CHANGE:
              Stamp_Menu_Exit();
              sMenuState.SettingCycle = _SETTING_CYCLE_RUN_CHOOSE;
              oLCD_C_Setting_Cycle[_LCD_C_SETTING_CALIB_PLEASE].Status = 1;
              DLCD_Setting_Cycle();
              break;
              
            case _SETTING_CYCLE_FREE_CHANGE:
              Stamp_Menu_Exit();
              sMenuState.SettingCycle = _SETTING_CYCLE_FREE_CHOOSE;
              oLCD_C_Setting_Cycle[_LCD_C_SETTING_CALIB_PLEASE].Status = 1;
              DLCD_Setting_Cycle();
              break;
              
              default: 
                break;
          }
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
          switch(sMenuState.SettingCycle)
          {
              case _SETTING_CYCLE_RUN_CHOOSE:
                sMenuState.SettingCycle = _SETTING_CYCLE_FREE_CHOOSE;
                Display_Control_Setting(5);
                break;
                
              case _SETTING_CYCLE_FREE_CHOOSE:
                sMenuState.SettingCycle = _SETTING_CYCLE_RUN_CHOOSE;
                Display_Control_Setting(4);
                break;
                
              case _SETTING_CYCLE_RUN_CHANGE:
                if(sMenuStamp.TimeRunCtrlOxy < TIME_MAX)     sMenuStamp.TimeRunCtrlOxy++;

                break;
                
              case _SETTING_CYCLE_FREE_CHANGE:
                if(sMenuStamp.TimeFreeCtrlOxy < TIME_MAX)    sMenuStamp.TimeFreeCtrlOxy++;
                break;
                
              default:
                break;
          }
          break;
          
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          switch(sMenuState.SettingCycle)
          {
              case _SETTING_CYCLE_RUN_CHOOSE:
                sMenuState.SettingCycle = _SETTING_CYCLE_FREE_CHOOSE;
                Display_Control_Setting(5);
                break;
                
              case _SETTING_CYCLE_FREE_CHOOSE:
                sMenuState.SettingCycle = _SETTING_CYCLE_RUN_CHOOSE;
                Display_Control_Setting(4);
                break;
                
              case _SETTING_CYCLE_RUN_CHANGE:
                if(sMenuStamp.TimeRunCtrlOxy > TIME_MIN)     sMenuStamp.TimeRunCtrlOxy--;
                
                break;
                
              case _SETTING_CYCLE_FREE_CHANGE:
                if(sMenuStamp.TimeFreeCtrlOxy > TIME_MIN)     sMenuStamp.TimeFreeCtrlOxy--;
                break;
                
              default:
                break;
          }
          break;
          
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Setting_Calib(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          switch(sMenuState.SettingCalib)
          {
            case _SETTING_CALIB_0_CHOOSE:
                sMenuState.Screen = _MENU_CALIB_OXY;
                sMenuState.CalibOxy = _CALIB_ON_GOING,
                fevent_active(sEventAppCtrlOxy, _EVENT_CTRL_OXY_0_CALIB);
                fevent_enable(sEventAppMenu, _EVENT_MENU_DISPLAY_CALIB_OXY);
                Clear_Rol_LCD(2, 7);
                oLCD_C_Calib_Oxy[_LCD_C_CALIB_OXY_0].Status = 1;
                DLCD_Calib_Oxy_Entry();
                break;
                
            case _SETTING_CALIB_100_CHOOSE:
                sMenuState.Screen = _MENU_CALIB_OXY;
                sMenuState.CalibOxy = _CALIB_ON_GOING,
                fevent_active(sEventAppCtrlOxy, _EVENT_CTRL_OXY_100_CALIB);
                fevent_enable(sEventAppMenu, _EVENT_MENU_DISPLAY_CALIB_OXY);
                Clear_Rol_LCD(2, 7);
                oLCD_C_Calib_Oxy[_LCD_C_CALIB_OXY_100].Status = 1;
                DLCD_Calib_Oxy_Entry();
                break;
    
              default: 
                break;
          }
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          switch(sMenuState.SettingCycle)
          {
              case _SETTING_CALIB_0_CHOOSE:
              case _SETTING_CALIB_100_CHOOSE:
                sMenuState.Screen = _MENU_SETTING_MAIN;
                Menu_ResetState();
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Main_Entry();
                break;
                
              default:
                break;
          }
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
          switch(sMenuState.SettingCalib)
          {
              case _SETTING_CALIB_0_CHOOSE:
                sMenuState.SettingCalib = _SETTING_CALIB_100_CHOOSE;
                Display_Control_Setting(5);
                break;
                
              case _SETTING_CALIB_100_CHOOSE:
                sMenuState.SettingCalib = _SETTING_CALIB_0_CHOOSE;
                Display_Control_Setting(4);
                break;
      
              default:
                break;
          }
          break;
          
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          switch(sMenuState.SettingCalib)
          {
              case _SETTING_CALIB_0_CHOOSE:
                sMenuState.SettingCalib = _SETTING_CALIB_100_CHOOSE;
                Display_Control_Setting(5);
                break;
                
              case _SETTING_CALIB_100_CHOOSE:
                sMenuState.SettingCalib = _SETTING_CALIB_0_CHOOSE;
                Display_Control_Setting(4);
                break;
      
              default:
                break;
          }
          break;
          
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Setting_Satility(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          Save_Satility_Flash(sMenuStamp.Satility);
          sMenuState.Screen = _MENU_SETTING_MAIN;
          Clear_Rol_LCD(2, 7);
          DLCD_Setting_Main_Entry();
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          Stamp_Menu_Exit();
          sMenuState.Screen = _MENU_SETTING_MAIN;
          Menu_ResetState();
          Clear_Rol_LCD(2, 7);
          DLCD_Setting_Main_Entry();
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
          if(sMenuStamp.Satility < SATILITY_MAX) sMenuStamp.Satility++;
          break;
          
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          if(sMenuStamp.Satility > SATILITY_MIN)    sMenuStamp.Satility--;
          break;
          
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Setting_Password(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
          switch(sMenuState.SettingPassword)
          {
            case _CHANGE_PASS_1:
                sMenuState.SettingPassword = _CHANGE_PASS_2;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_2].Status = 1;
                DLCD_Setting_Password();
                break;
                
            case _CHANGE_PASS_2:
                sMenuState.SettingPassword = _CHANGE_PASS_3;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_3].Status = 1;
                DLCD_Setting_Password();
                break;
                
            case _CHANGE_PASS_3:
                sMenuState.SettingPassword = _CHANGE_PASS_4;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_4].Status = 1;
                DLCD_Setting_Password();
                break;
                
            case _CHANGE_PASS_4:
                sMenuState.SettingPassword = _CHANGE_PASS_5;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_5].Status = 1;
                DLCD_Setting_Password();
                break;
                
            case _CHANGE_PASS_5:
                sMenuState.SettingPassword = _CHANGE_PASS_6;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_6].Status = 1;
                DLCD_Setting_Password();
                break;
                
            case _CHANGE_PASS_6:
                Save_Password();
                sMenuState.SettingPassword = _SUCCESS_PASS;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_SUCCESS].Status = 1;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_CLICK].Status = 1;
                DLCD_Setting_Password();
                break;
                
            case _SUCCESS_PASS:
                sMenuState.Screen = _MENU_MAIN_1;
                Menu_ResetState();
                Clear_Rol_LCD(2, 7);
                DLCD_Main_1_Entry();
                
              default: 
                break;
          }
          break;
          
        case _BT_ENTER_HOLD_CYCLE:
          break;
          
        case _BT_EXIT_CLICK:
          switch(sMenuState.SettingPassword)
          {
              case _CHANGE_PASS_1:
                Stamp_Menu_Exit();
                sMenuState.Screen = _MENU_SETTING_MAIN;
                Menu_ResetState();
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Main_Entry();
                break;
                
              case _CHANGE_PASS_2:
                sMenuState.SettingPassword = _CHANGE_PASS_1;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_1].Status = 1;
                DLCD_Setting_Password();
                break;
                
              case _CHANGE_PASS_3:
                sMenuState.SettingPassword = _CHANGE_PASS_2;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_2].Status = 1;
                DLCD_Setting_Password();
                break;
                
              case _CHANGE_PASS_4:
                sMenuState.SettingPassword = _CHANGE_PASS_3;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_3].Status = 1;
                DLCD_Setting_Password();
                break;
                
              case _CHANGE_PASS_5:
                sMenuState.SettingPassword = _CHANGE_PASS_4;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_4].Status = 1;
                DLCD_Setting_Password();
                break;
                
              case _CHANGE_PASS_6:
                sMenuState.SettingPassword = _CHANGE_PASS_5;
                oLCD_C_Setting_Password[_LCD_C_SETTING_PASSWORD_5].Status = 1;
                DLCD_Setting_Password();
                break;
                
              case _SUCCESS_PASS:
                Stamp_Menu_Exit();
                sMenuState.Screen = _MENU_MAIN_1;
                Menu_ResetState();
                Clear_Rol_LCD(2, 7);
                DLCD_Main_1_Entry();
          }
          break;
          
        case _BT_EXIT_HOLD_CYCLE:
          break;
          
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
          switch(sMenuState.SettingPassword)
          {
            case _CHANGE_PASS_1:
              if(sMenuStamp.Pass1 <9)  sMenuStamp.Pass1++;
              break;
            
            case _CHANGE_PASS_2:
              if(sMenuStamp.Pass2 <9)  sMenuStamp.Pass2++;
              break;
              
            case _CHANGE_PASS_3:
              if(sMenuStamp.Pass3 <9)  sMenuStamp.Pass3++;
              break;
              
            case _CHANGE_PASS_4:
              if(sMenuStamp.Pass4 <9)  sMenuStamp.Pass4++;
              break;
              
            case _CHANGE_PASS_5:
              if(sMenuStamp.Pass5 <9)  sMenuStamp.Pass5++;
              break;
              
            case _CHANGE_PASS_6:
              if(sMenuStamp.Pass6 <9)  sMenuStamp.Pass6++;
              break;
              
              default:
                break;
          }
          break;
          
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          switch(sMenuState.SettingPassword)
          {
            case _CHANGE_PASS_1:
              if(sMenuStamp.Pass1 > 0)    sMenuStamp.Pass1--;
              break;
            
            case _CHANGE_PASS_2:
              if(sMenuStamp.Pass2 > 0)    sMenuStamp.Pass2--;
              break;
              
            case _CHANGE_PASS_3:
              if(sMenuStamp.Pass3 > 0)    sMenuStamp.Pass3--;
              break;
              
            case _CHANGE_PASS_4:
              if(sMenuStamp.Pass4 > 0)    sMenuStamp.Pass4--;
              break;
              
            case _CHANGE_PASS_5:
              if(sMenuStamp.Pass5 > 0)    sMenuStamp.Pass5--;
              break;
              
            case _CHANGE_PASS_6:
              if(sMenuStamp.Pass6 > 0)    sMenuStamp.Pass6--;
              break;
              
              default:
                break;
          }
          break;
    
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}

void    BT_Menu_Calib_Oxy(uint8_t KindButton)
{
    switch(KindButton)
    {
        case _BT_ENTER_CLICK:
        case _BT_ENTER_HOLD_CYCLE:
        case _BT_EXIT_CLICK:
        case _BT_EXIT_HOLD_CYCLE:
            if(sMenuState.CalibOxy != _CALIB_ON_GOING)
            {
                sMenuState.SettingCalib = _SETTING_CALIB_0_CHOOSE;
                sMenuState.Screen = _MENU_SETTING_CALIB;
                Clear_Rol_LCD(2, 7);
                DLCD_Setting_Calib_Entry();
            }
            break;
            
            
        case _BT_UP_CLICK:
        case _BT_UP_HOLD_CYCLE:
        case _BT_DOWN_CLICK:
        case _BT_DOWN_HOLD_CYCLE:
          break;
    
        case _BT_ENTER_HOLD_ONCE:
        case _BT_EXIT_HOLD_ONCE:
        case _BT_UP_HOLD_ONCE:
        case _BT_DOWN_HOLD_ONCE:
          break;
        
        default:
          break;
    }
}
/*========================  Function Handle Menu =======================*/
void    Handle_Menu_Button(uint8_t KindButton)
{
    fevent_enable(sEventAppMenu, _EVENT_MENU_DISPLAY_BACK_MAIN_1);
    switch(sMenuState.Screen)
    {
        case _MENU_MAIN_1:
          BT_Menu_Main_1(KindButton);
          break;
          
        case _MENU_MAIN_2:
          BT_Menu_Main_2(KindButton);
          break;
          
        case _MENU_LOGIN:
          BT_Menu_Login(KindButton);
          break;
          
        case _MENU_SETTING_MAIN:
          BT_Menu_Setting_Main(KindButton);
          break;
          
        case _MENU_SETTING_CYCLE:
          BT_Menu_Setting_Cycle(KindButton);
          break;
          
        case _MENU_SETTING_CALIB:
          BT_Menu_Setting_Calib(KindButton);
          break;
          
        case _MENU_SETTING_SATILITY:
          BT_Menu_Setting_Satility(KindButton);
          break;
          
        case _MENU_SETTING_PASSWORD:
          BT_Menu_Setting_Password(KindButton);
          break;
          
        case _MENU_CALIB_OXY:
          BT_Menu_Calib_Oxy(KindButton);
          break;
          
        default:
          break;
    }
}
/*=========================  Function Handle LCD =======================*/
uint8_t Check_Password(void)
{
    uint8_t Result = 0;
    if(sPassword.Obj1 == sPassword.Pass1 &&
       sPassword.Obj2 == sPassword.Pass2 &&
       sPassword.Obj3 == sPassword.Pass3 &&
       sPassword.Obj4 == sPassword.Pass4 &&
       sPassword.Obj5 == sPassword.Pass5 &&
       sPassword.Obj6 == sPassword.Pass6 )
    {
        Result = 1;
    }
    sPassword.Obj1 = 0;
    sPassword.Obj2 = 0;
    sPassword.Obj3 = 0; 
    sPassword.Obj4 = 0;
    sPassword.Obj5 = 0;
    sPassword.Obj6 = 0; 
    
    return Result;
}

void Save_Password(void)
{
    uint8_t aData[8] = {0};
    uint8_t length = 0;
    
    if(sMenuStamp.Pass1 <= 0x09 && sMenuStamp.Pass2 <= 0x09 && 
       sMenuStamp.Pass3 <= 0x09 && sMenuStamp.Pass4 <= 0x09 && 
       sMenuStamp.Pass5 <= 0x09 && sMenuStamp.Pass6 <= 0x09 )
    {
        sPassword.Pass1 = sMenuStamp.Pass1;
        sPassword.Pass2 = sMenuStamp.Pass2;
        sPassword.Pass3 = sMenuStamp.Pass3;
        sPassword.Pass4 = sMenuStamp.Pass4;
        sPassword.Pass5 = sMenuStamp.Pass5;
        sPassword.Pass6 = sMenuStamp.Pass6;
        aData[length++] = sPassword.Pass1;
        aData[length++] = sPassword.Pass2;
        aData[length++] = sPassword.Pass3;
        aData[length++] = sPassword.Pass4;
        aData[length++] = sPassword.Pass5;
        aData[length++] = sPassword.Pass6;
        Save_Array(ADDR_PASSWORD_SETTING, aData, length);
    }
}

void Init_Password(void)
{
    if(*(__IO uint8_t*)(ADDR_PASSWORD_SETTING) == BYTE_TEMP_FIRST)
    {
        sPassword.Pass1  = *(__IO uint8_t*)(ADDR_PASSWORD_SETTING+2) ;
        sPassword.Pass2  = *(__IO uint8_t*)(ADDR_PASSWORD_SETTING+3) ;
        sPassword.Pass3  = *(__IO uint8_t*)(ADDR_PASSWORD_SETTING+4) ;
        sPassword.Pass3  = *(__IO uint8_t*)(ADDR_PASSWORD_SETTING+5) ;
        sPassword.Pass3  = *(__IO uint8_t*)(ADDR_PASSWORD_SETTING+6) ;
        sPassword.Pass3  = *(__IO uint8_t*)(ADDR_PASSWORD_SETTING+7) ;
        if(sPassword.Pass1 > 0x09 || sPassword.Pass2 > 0x09 || 
           sPassword.Pass3 > 0x09 || sPassword.Pass4 > 0x09 ||
           sPassword.Pass5 > 0x09 || sPassword.Pass6 > 0x09)
        {
            sPassword.Pass1 = 0x00;
            sPassword.Pass2 = 0x00;
            sPassword.Pass3 = 0x00;
            sPassword.Pass4 = 0x00;
            sPassword.Pass5 = 0x00;
            sPassword.Pass6 = 0x00;
            Save_Password();
        }
    }
    Stamp_Menu_Exit();
}

void Stamp_Menu_Exit(void)
{
    sMenuStamp.Pass1 = sPassword.Pass1;
    sMenuStamp.Pass2 = sPassword.Pass2;
    sMenuStamp.Pass3 = sPassword.Pass3;
    sMenuStamp.Pass4 = sPassword.Pass4;
    sMenuStamp.Pass5 = sPassword.Pass5;
    sMenuStamp.Pass6 = sPassword.Pass6;
    sMenuStamp.Satility = sParamCtrlOxy.SetupSatility;
    sMenuStamp.TimeFreeCtrlOxy = sTimeCtrlOxy.FreeCtrl;
    sMenuStamp.TimeRunCtrlOxy  = sTimeCtrlOxy.RunCtrl;
}

/*============================ Function Handle =========================*/
void Menu_ResetState(void)
{
    sMenuState.Login = 0;
    sMenuState.SettingMain = 0;
    sMenuState.SettingCycle = 0;
    sMenuState.SettingCalib = 0;
    sMenuState.SettingPassword = 0;
}

/*==========================Function Handle=========================*/
void Init_AppMenuDisplay(void)
{
    Init_Password();
}

uint8_t AppMenu_Task(void)
{
    uint8_t i = 0;
    uint8_t Result =  false;
    
    for(i = 0; i < _EVENT_MENU_END; i++)
    {
        if(sEventAppMenu[i].e_status == 1)
        {
            Result = true; 
            
            if((sEventAppMenu[i].e_systick == 0) ||
               ((HAL_GetTick() - sEventAppMenu[i].e_systick) >= sEventAppMenu[i].e_period))
            {
                sEventAppMenu[i].e_status = 0; //Disable event
                sEventAppMenu[i].e_systick= HAL_GetTick();
                sEventAppMenu[i].e_function_handler(i);
            }
        }
    }
    
    
    return Result;
}

